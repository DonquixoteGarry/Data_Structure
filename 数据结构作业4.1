/*
josephus问题
n个人围坐成一圈，按顺序编号为1－n，确定一个整数m，从1号开始数数，每数到第m个人出列，剩下的人从下一个人重新开始数，直至只剩下一个人为止
编写程序，对任意输入的n和m，求出最后剩下的人的编号。要求利用线性表保存这n个人，用公式化描述方法实现
输入：
input.txt，两个整数n（3－100），m（1－m）
输出：
若输入合法，按出列顺序输出人的编号，否则输出“WRONG”
编号之间用一个空格间隔，最后一个编号后不能有空格
如(n=8,m=5时)上述例子的输出应为：
5 2 8 7 1 4 6 3
*/


#include<iostream>
#include<fstream>
using namespace std;
class people
{
public:
	int value;
	bool exist;
	people(int x=0)
	{
		value = x;
		exist = true;
	}
	void kick()
	{
		exist = false;
	};
};
class queue
{
public:
	int length;
	people* persons;
	queue(int num = 2)
	{
		if (num <= 0)
		{
			cout << "无效人数" << endl;
			return;
		}
		length = num;
		persons = new people[length];
		for (int i = 0; i < num; i++) persons[i].value = i + 1; 
	};
	void start(int width)//width为每次数过的步长
	{
		if (width == 0)
		{
			cout << "无效步长" << endl;
			return;

		}
		int out=0,step = 0;//out为出局人数,step为最近一次有人淘汰后的走过的步数
		for (int j = 0; out < length; j = (j + 1) %length)
		{
			if (persons[j].exist == true)step++;
			if (step == width)
			{
				persons[j].kick();
				step = 0;out++;
				cout << "第" << out << "位出局者为" << j + 1 << "号"<<endl;
			}
		}
	}
};
int main()
{
	int person, width;
	ifstream s("D://input.txt");
	s >> person >> width;
	s.close();
	cout << "person=  "<<person<<"  width=" << width << endl;
	queue Queue(person);
	Queue.start(width);
	system("pause");
	return 0;
}
